// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class Rust {
  Future<String> startLdk(
      {required String username,
      required String password,
      required String host,
      required String nodeNetwork,
      required String path,
      required int port,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartLdkConstMeta;

  Future<String> openChannel(
      {required String pubKeyStr,
      required String peerAddStr,
      required int amount,
      required bool isPublic,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpenChannelConstMeta;
}

class RustImpl extends FlutterRustBridgeBase<RustWire> implements Rust {
  factory RustImpl(ffi.DynamicLibrary dylib) => RustImpl.raw(RustWire(dylib));

  RustImpl.raw(RustWire inner) : super(inner);

  Future<String> startLdk(
          {required String username,
          required String password,
          required String host,
          required String nodeNetwork,
          required String path,
          required int port,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_start_ldk(
            port_,
            _api2wire_String(username),
            _api2wire_String(password),
            _api2wire_String(host),
            _api2wire_String(nodeNetwork),
            _api2wire_String(path),
            _api2wire_u16(port)),
        parseSuccessData: _wire2api_String,
        constMeta: kStartLdkConstMeta,
        argValues: [username, password, host, nodeNetwork, path, port],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kStartLdkConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start_ldk",
        argNames: [
          "username",
          "password",
          "host",
          "nodeNetwork",
          "path",
          "port"
        ],
      );

  Future<String> openChannel(
          {required String pubKeyStr,
          required String peerAddStr,
          required int amount,
          required bool isPublic,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_open_channel(
            port_,
            _api2wire_String(pubKeyStr),
            _api2wire_String(peerAddStr),
            _api2wire_u64(amount),
            isPublic),
        parseSuccessData: _wire2api_String,
        constMeta: kOpenChannelConstMeta,
        argValues: [pubKeyStr, peerAddStr, amount, isPublic],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kOpenChannelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "open_channel",
        argNames: ["pubKeyStr", "peerAddStr", "amount", "isPublic"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  bool _api2wire_bool(bool raw) {
    return raw;
  }

  int _api2wire_u16(int raw) {
    return raw;
  }

  int _api2wire_u64(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RustWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_start_ldk(
    int port_,
    ffi.Pointer<wire_uint_8_list> username,
    ffi.Pointer<wire_uint_8_list> password,
    ffi.Pointer<wire_uint_8_list> host,
    ffi.Pointer<wire_uint_8_list> node_network,
    ffi.Pointer<wire_uint_8_list> path,
    int port,
  ) {
    return _wire_start_ldk(
      port_,
      username,
      password,
      host,
      node_network,
      path,
      port,
    );
  }

  late final _wire_start_ldkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint16)>>('wire_start_ldk');
  late final _wire_start_ldk = _wire_start_ldkPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int)>();

  void wire_open_channel(
    int port_,
    ffi.Pointer<wire_uint_8_list> pub_key_str,
    ffi.Pointer<wire_uint_8_list> peer_add_str,
    int amount,
    bool is_public,
  ) {
    return _wire_open_channel(
      port_,
      pub_key_str,
      peer_add_str,
      amount,
      is_public,
    );
  }

  late final _wire_open_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64,
              ffi.Bool)>>('wire_open_channel');
  late final _wire_open_channel = _wire_open_channelPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, int, bool)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
