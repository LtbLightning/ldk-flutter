// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

abstract class Rust {
  Future<LdkNodeInfo> getNodeInfo({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetNodeInfoConstMeta;

  Future<String> openChannel(
      {required String pubKeyStr,
      required String peerAddStr,
      required int amount,
      required bool isPublic,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpenChannelConstMeta;

  Future<List<ChannelInfo>> listChannels({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListChannelsConstMeta;

  Future<List<String>> listPeers({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListPeersConstMeta;

  Future<void> closeChannel({required String channelIdStr, required String peerPubkeyStr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCloseChannelConstMeta;

  Future<void> forceCloseChannel({required String channelIdStr, required String peerPubkeyStr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kForceCloseChannelConstMeta;

  Future<String> startLdkAndOpenChannel(
      {required String username,
      required String password,
      required String host,
      required Network nodeNetwork,
      required String pubKey,
      required int amount,
      required String path,
      required int port,
      required int port2,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartLdkAndOpenChannelConstMeta;
}

class ChannelInfo {
  final String channelId;
  final String? fundingTxid;
  final String peerPubkey;
  final String? peerAlias;
  final String? shortChannelId;
  final bool isChannelReady;
  final int channelValueSatoshis;
  final int localBalanceMsat;
  final int availableBalanceForSendMsat;
  final int availableBalanceForRecvMsat;
  final bool channelCanSendPayments;
  final bool public;
  final bool isChannelUsable;

  ChannelInfo({
    required this.channelId,
    this.fundingTxid,
    required this.peerPubkey,
    this.peerAlias,
    this.shortChannelId,
    required this.isChannelReady,
    required this.channelValueSatoshis,
    required this.localBalanceMsat,
    required this.availableBalanceForSendMsat,
    required this.availableBalanceForRecvMsat,
    required this.channelCanSendPayments,
    required this.public,
    required this.isChannelUsable,
  });
}

class LdkNodeInfo {
  final String nodePubKey;
  final int numChannels;
  final int numUsableChannels;
  final int localBalanceMsat;
  final int numPeers;

  LdkNodeInfo({
    required this.nodePubKey,
    required this.numChannels,
    required this.numUsableChannels,
    required this.localBalanceMsat,
    required this.numPeers,
  });
}

enum Network {
  SIGNET,
  TESTNET,
  REGTEST,
  BITCOIN,
}

class RustImpl implements Rust {
  final RustPlatform _platform;
  factory RustImpl(ExternalLibrary dylib) => RustImpl.raw(RustPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustImpl.wasm(FutureOr<WasmModule> module) => RustImpl(module as ExternalLibrary);
  RustImpl.raw(this._platform);
  Future<LdkNodeInfo> getNodeInfo({dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_get_node_info(port_),
        parseSuccessData: _wire2api_ldk_node_info,
        constMeta: kGetNodeInfoConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetNodeInfoConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_node_info",
        argNames: [],
      );

  Future<String> openChannel(
          {required String pubKeyStr,
          required String peerAddStr,
          required int amount,
          required bool isPublic,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_open_channel(port_, _platform.api2wire_String(pubKeyStr),
            _platform.api2wire_String(peerAddStr), _platform.api2wire_u64(amount), isPublic),
        parseSuccessData: _wire2api_String,
        constMeta: kOpenChannelConstMeta,
        argValues: [pubKeyStr, peerAddStr, amount, isPublic],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kOpenChannelConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "open_channel",
        argNames: ["pubKeyStr", "peerAddStr", "amount", "isPublic"],
      );

  Future<List<ChannelInfo>> listChannels({dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_list_channels(port_),
        parseSuccessData: _wire2api_list_channel_info,
        constMeta: kListChannelsConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kListChannelsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_channels",
        argNames: [],
      );

  Future<List<String>> listPeers({dynamic hint}) => _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_list_peers(port_),
        parseSuccessData: _wire2api_StringList,
        constMeta: kListPeersConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kListPeersConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_peers",
        argNames: [],
      );

  Future<void> closeChannel({required String channelIdStr, required String peerPubkeyStr, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_close_channel(
            port_, _platform.api2wire_String(channelIdStr), _platform.api2wire_String(peerPubkeyStr)),
        parseSuccessData: _wire2api_unit,
        constMeta: kCloseChannelConstMeta,
        argValues: [channelIdStr, peerPubkeyStr],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCloseChannelConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "close_channel",
        argNames: ["channelIdStr", "peerPubkeyStr"],
      );

  Future<void> forceCloseChannel({required String channelIdStr, required String peerPubkeyStr, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_force_close_channel(
            port_, _platform.api2wire_String(channelIdStr), _platform.api2wire_String(peerPubkeyStr)),
        parseSuccessData: _wire2api_unit,
        constMeta: kForceCloseChannelConstMeta,
        argValues: [channelIdStr, peerPubkeyStr],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kForceCloseChannelConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "force_close_channel",
        argNames: ["channelIdStr", "peerPubkeyStr"],
      );

  Future<String> startLdkAndOpenChannel(
          {required String username,
          required String password,
          required String host,
          required Network nodeNetwork,
          required String pubKey,
          required int amount,
          required String path,
          required int port,
          required int port2,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_start_ldk_and_open_channel(
            port_,
            _platform.api2wire_String(username),
            _platform.api2wire_String(password),
            _platform.api2wire_String(host),
            api2wire_network(nodeNetwork),
            _platform.api2wire_String(pubKey),
            _platform.api2wire_u64(amount),
            _platform.api2wire_String(path),
            api2wire_u16(port),
            api2wire_u16(port2)),
        parseSuccessData: _wire2api_String,
        constMeta: kStartLdkAndOpenChannelConstMeta,
        argValues: [username, password, host, nodeNetwork, pubKey, amount, path, port, port2],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kStartLdkAndOpenChannelConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "start_ldk_and_open_channel",
        argNames: ["username", "password", "host", "nodeNetwork", "pubKey", "amount", "path", "port", "port2"],
      );

// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  ChannelInfo _wire2api_channel_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 13) throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return ChannelInfo(
      channelId: _wire2api_String(arr[0]),
      fundingTxid: _wire2api_opt_String(arr[1]),
      peerPubkey: _wire2api_String(arr[2]),
      peerAlias: _wire2api_opt_String(arr[3]),
      shortChannelId: _wire2api_opt_String(arr[4]),
      isChannelReady: _wire2api_bool(arr[5]),
      channelValueSatoshis: _wire2api_u64(arr[6]),
      localBalanceMsat: _wire2api_u64(arr[7]),
      availableBalanceForSendMsat: _wire2api_u64(arr[8]),
      availableBalanceForRecvMsat: _wire2api_u64(arr[9]),
      channelCanSendPayments: _wire2api_bool(arr[10]),
      public: _wire2api_bool(arr[11]),
      isChannelUsable: _wire2api_bool(arr[12]),
    );
  }

  LdkNodeInfo _wire2api_ldk_node_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return LdkNodeInfo(
      nodePubKey: _wire2api_String(arr[0]),
      numChannels: _wire2api_usize(arr[1]),
      numUsableChannels: _wire2api_usize(arr[2]),
      localBalanceMsat: _wire2api_u64(arr[3]),
      numPeers: _wire2api_usize(arr[4]),
    );
  }

  List<ChannelInfo> _wire2api_list_channel_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_channel_info).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_network(Network raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

class RustPlatform extends FlutterRustBridgeBase<RustWire> {
  RustPlatform(ffi.DynamicLibrary dylib) : super(RustWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: api_fill_to_wire

}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RustWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  void wire_get_node_info(
    int port_,
  ) {
    return _wire_get_node_info(
      port_,
    );
  }

  late final _wire_get_node_infoPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_node_info');
  late final _wire_get_node_info = _wire_get_node_infoPtr.asFunction<void Function(int)>();

  void wire_open_channel(
    int port_,
    ffi.Pointer<wire_uint_8_list> pub_key_str,
    ffi.Pointer<wire_uint_8_list> peer_add_str,
    int amount,
    bool is_public,
  ) {
    return _wire_open_channel(
      port_,
      pub_key_str,
      peer_add_str,
      amount,
      is_public,
    );
  }

  late final _wire_open_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Uint64,
              ffi.Bool)>>('wire_open_channel');
  late final _wire_open_channel = _wire_open_channelPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, int, bool)>();

  void wire_list_channels(
    int port_,
  ) {
    return _wire_list_channels(
      port_,
    );
  }

  late final _wire_list_channelsPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_list_channels');
  late final _wire_list_channels = _wire_list_channelsPtr.asFunction<void Function(int)>();

  void wire_list_peers(
    int port_,
  ) {
    return _wire_list_peers(
      port_,
    );
  }

  late final _wire_list_peersPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_list_peers');
  late final _wire_list_peers = _wire_list_peersPtr.asFunction<void Function(int)>();

  void wire_close_channel(
    int port_,
    ffi.Pointer<wire_uint_8_list> channel_id_str,
    ffi.Pointer<wire_uint_8_list> peer_pubkey_str,
  ) {
    return _wire_close_channel(
      port_,
      channel_id_str,
      peer_pubkey_str,
    );
  }

  late final _wire_close_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_close_channel');
  late final _wire_close_channel = _wire_close_channelPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_force_close_channel(
    int port_,
    ffi.Pointer<wire_uint_8_list> channel_id_str,
    ffi.Pointer<wire_uint_8_list> peer_pubkey_str,
  ) {
    return _wire_force_close_channel(
      port_,
      channel_id_str,
      peer_pubkey_str,
    );
  }

  late final _wire_force_close_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>>('wire_force_close_channel');
  late final _wire_force_close_channel = _wire_force_close_channelPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_start_ldk_and_open_channel(
    int port_,
    ffi.Pointer<wire_uint_8_list> username,
    ffi.Pointer<wire_uint_8_list> password,
    ffi.Pointer<wire_uint_8_list> host,
    int node_network,
    ffi.Pointer<wire_uint_8_list> pub_key,
    int amount,
    ffi.Pointer<wire_uint_8_list> path,
    int port,
    int port2,
  ) {
    return _wire_start_ldk_and_open_channel(
      port_,
      username,
      password,
      host,
      node_network,
      pub_key,
      amount,
      path,
      port,
      port2,
    );
  }

  late final _wire_start_ldk_and_open_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint16,
              ffi.Uint16)>>('wire_start_ldk_and_open_channel');
  late final _wire_start_ldk_and_open_channel = _wire_start_ldk_and_open_channelPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>,
          int, ffi.Pointer<wire_uint_8_list>, int, ffi.Pointer<wire_uint_8_list>, int, int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>('free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct =
      _free_WireSyncReturnStructPtr.asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
