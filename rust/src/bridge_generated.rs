#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.

use crate::r_api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;

// Section: imports

use crate::utils::serialize::Network;
use crate::utils::types::ChannelInfo;
use crate::utils::types::LdkNodeInfo;

// Section: wire functions

fn wire_get_node_info_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_node_info",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_node_info()),
    )
}
fn wire_open_channel_impl(
    port_: MessagePort,
    pub_key_str: impl Wire2Api<String> + UnwindSafe,
    peer_add_str: impl Wire2Api<String> + UnwindSafe,
    amount: impl Wire2Api<u64> + UnwindSafe,
    is_public: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "open_channel",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pub_key_str = pub_key_str.wire2api();
            let api_peer_add_str = peer_add_str.wire2api();
            let api_amount = amount.wire2api();
            let api_is_public = is_public.wire2api();
            move |task_callback| {
                Ok(open_channel(
                    api_pub_key_str,
                    api_peer_add_str,
                    api_amount,
                    api_is_public,
                ))
            }
        },
    )
}
fn wire_list_channels_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_channels",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(list_channels()),
    )
}
fn wire_list_peers_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list_peers",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(list_peers()),
    )
}
fn wire_close_channel_impl(
    port_: MessagePort,
    channel_id_str: impl Wire2Api<String> + UnwindSafe,
    peer_pubkey_str: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "close_channel",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_channel_id_str = channel_id_str.wire2api();
            let api_peer_pubkey_str = peer_pubkey_str.wire2api();
            move |task_callback| Ok(close_channel(api_channel_id_str, api_peer_pubkey_str))
        },
    )
}
fn wire_force_close_channel_impl(
    port_: MessagePort,
    channel_id_str: impl Wire2Api<String> + UnwindSafe,
    peer_pubkey_str: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "force_close_channel",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_channel_id_str = channel_id_str.wire2api();
            let api_peer_pubkey_str = peer_pubkey_str.wire2api();
            move |task_callback| Ok(force_close_channel(api_channel_id_str, api_peer_pubkey_str))
        },
    )
}
fn wire_start_ldk_and_open_channel_impl(
    port_: MessagePort,
    username: impl Wire2Api<String> + UnwindSafe,
    password: impl Wire2Api<String> + UnwindSafe,
    host: impl Wire2Api<String> + UnwindSafe,
    node_network: impl Wire2Api<Network> + UnwindSafe,
    pub_key: impl Wire2Api<String> + UnwindSafe,
    amount: impl Wire2Api<u64> + UnwindSafe,
    path: impl Wire2Api<String> + UnwindSafe,
    port: impl Wire2Api<u16> + UnwindSafe,
    port2: impl Wire2Api<u16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "start_ldk_and_open_channel",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_username = username.wire2api();
            let api_password = password.wire2api();
            let api_host = host.wire2api();
            let api_node_network = node_network.wire2api();
            let api_pub_key = pub_key.wire2api();
            let api_amount = amount.wire2api();
            let api_path = path.wire2api();
            let api_port = port.wire2api();
            let api_port2 = port2.wire2api();
            move |task_callback| {
                start_ldk_and_open_channel(
                    api_username,
                    api_password,
                    api_host,
                    api_node_network,
                    api_pub_key,
                    api_amount,
                    api_path,
                    api_port,
                    api_port2,
                )
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<Network> for i32 {
    fn wire2api(self) -> Network {
        match self {
            0 => Network::SIGNET,
            1 => Network::TESTNET,
            2 => Network::REGTEST,
            3 => Network::BITCOIN,
            _ => unreachable!("Invalid variant for Network: {}", self),
        }
    }
}
impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for ChannelInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.channel_id.into_dart(),
            self.funding_txid.into_dart(),
            self.peer_pubkey.into_dart(),
            self.peer_alias.into_dart(),
            self.short_channel_id.into_dart(),
            self.is_channel_ready.into_dart(),
            self.channel_value_satoshis.into_dart(),
            self.local_balance_msat.into_dart(),
            self.available_balance_for_send_msat.into_dart(),
            self.available_balance_for_recv_msat.into_dart(),
            self.channel_can_send_payments.into_dart(),
            self.public.into_dart(),
            self.is_channel_usable.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ChannelInfo {}

impl support::IntoDart for LdkNodeInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.node_pub_key.into_dart(),
            self.num_channels.into_dart(),
            self.num_usable_channels.into_dart(),
            self.local_balance_msat.into_dart(),
            self.num_peers.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LdkNodeInfo {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
